/* +++++++++++++++++++++++++++++++++++++++++++++++++++++ */
/*		       				 	 */
/*               Distributed Component Tree              */
/* Including component analtysis and attribute filtering */
/*                 Author: Simon Gazagnes                */
/*                University of Groningen                */
/*                    Compiler : C99                     */
/*                   Libraries needed:                   */
/*      OpenMPI, OpenMP, FreeImage, CFITSIO, HDF5.       */
/*		       				 	 */
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++ */

#include "types.h"
#include "arguments.h"
#include "boundary.h"
#include "attributes.h"
#include "image.h"
#include "tree_flood.h"
#include "tree_filt.h"
#include "lambdavec.h"
#include "refine.h"
#include "writefile.h"
//#include "moschini.h"

/* +++++++++++++++++++++++++++++++ */
/*     	   Global Variables        */
/* +++++++++++++++++++++++++++++++ */

float 		g_max_greyval;
ulong 		g_max_levels;
struct tms 	tstruct;				
clock_t 	start;					


/* +++++++++++++++++++++++++++++++ */
/*				   */
/*     	     Main Function         */
/*				   */
/* +++++++++++++++++++++++++++++++ */


int main(int argc, char** argv) {
  
 
  /* +++++++++++++++++++++++++++ */
  /*         Initializing        */
  /* +++++++++++++++++++++++++++ */

  init_mpi();
  if(rank() == 0) printf("\n ******* DISCCOMAN, starting... ******* \n\n");

  Arguments 	args;
  parse_args(argc, argv, &args);			/* Read input arguments */
  check_bytes();

  create_mpi_value_type();				/* Create MPI struct for value type */
  create_mpi_boundnode_type();                          /* Create MPI struct for boundary nodes */ 
  create_mpi_borderindex_type();                        /* Create MPI struct for borderindex struct */

  double	*copy_attr	= NULL; 	       	/* Attributes copy (pattern spectrum)  */ 
  value 	*gvals_par	= NULL;			/* Parents node intensities (pattern spec) */
  LambdaVec 	*lvec		= lambda_vector_read(argv[0], args.lvec_arg, args.imscale_arg); 
  ulong 	dims_tile[3]    = {1, 1, 1};		/* Tile dimensions */
  ulong 	dims_img[3]     = {1, 1, 1};		/* Image dimensions */
  ulong 	size_tile;				/* Tile size */
  int 		attrib 		= args.attribute_arg;
  Node          *local_tree 	= malloc(1* sizeof(Node));   check_alloc(local_tree, 000);

  set_border(&args, local_tree);	/* Check overlapping borders */
  local_tree->gval   = read_input(&args, dims_tile, dims_img, local_tree->border);      
  size_tile   	     = dims_tile[0]*dims_tile[1]*dims_tile[2];
  local_tree->size   = size_tile;
  check_refine(&args,  local_tree->gval, size_tile); /* Check is values need refinement */
  set_flooding(&args, args.bpp_arg);			/* Check flooding choice */
  set_connectivity(&args, dims_tile[2]);		/* Check connectivity choice */ 
  check_operation(&args, local_tree,  g_max_greyval); /* Check morph operation */
  ulong *attr_off = attribute_offsets(&args, dims_img);

  /* Initialization of attributes functions */
  new_aux_data          = AttribsArray[attrib].new_data;
  init_aux_data         = AttribsArray[attrib].init_data;
  delete_aux_data       = AttribsArray[attrib].delete_data;
  add_to_aux_data       = AttribsArray[attrib].add_to_data;  
  merge_aux_data        = AttribsArray[attrib].merge_data;
  merge_to_aux_data     = AttribsArray[attrib].merge_to_data;
  clone_aux_data        = AttribsArray[attrib].clone_data;
  create_mpi_aux_data   = AttribsArray[attrib].create_mpi_data;
  
  create_mpi_aux_data();

  if (rank() == 0){
    print_args(&args, dims_tile);
    if(args.bpp_arg < 0 && FLOAT_TYPE == 0) warn("Floating point not activated");
    if(args.bpp_arg > 0 && FLOAT_TYPE == 1) warn("Floating point activated, but data is not. Might lead to numerical errors");
  }
  MPI_Barrier(MPI_COMM_WORLD);
  start = times(&tstruct);

  /* +++++++++++++++++++++++++++ */
  /*     Local tree building     */
  /* +++++++++++++++++++++++++++ */

  info("Starting local flooding");
  //local_tree->parent = build_local_tree(&args, local_tree, dims_tile, attr_off);
  timing("Local tree built: wallclock time = %0.2f",
	 (float)(times(&tstruct) - start)/(float)sysconf(_SC_CLK_TCK));

  /* +++++++++++++++++++++++++++ */
  /*     Update tree borders     */
  /* +++++++++++++++++++++++++++ *

  if (np() > 1){
    if (!strcmp(args.filter_arg, "pattern")) {
      
      //Need to copy attributes and parent values for distributed pattern spectra //
      gvals_par = calloc(size_tile, sizeof(value));   check_alloc(gvals_par, 1);
      copy_attr = calloc(size_tile, sizeof(double));  check_alloc(copy_attr, 2);
           
      #pragma omp parallel for
      for (ulong i = 0; i < size_tile; i++) {
	copy_attr[i] = is_levelroot(local_tree, i) && local_tree->has_attrib[i] ?
	  (*AttribsArray[attrib].attribute)(local_tree->attribute + i*local_tree->size_att) : -DBL_MAX;	    
	if(local_tree->parent[i] != BOTTOM)
	  gvals_par[i] = local_tree->gval[local_tree->parent[i]];
	else if(FLOAT_TYPE == 1)
	  gvals_par[i] = -FLT_MAX;
	else
	  gvals_par[i] = INT_MIN;
      }    
    }
    
    info("Correcting the edges");
    //  local_tree = correct_borders(&args, local_tree, dims_tile); 
    timing("Tiles border corrected: wallclock time = %0.2f",
	   (float)(times(&tstruct) - start)/(float)sysconf(_SC_CLK_TCK));
  }

  /* +++++++++++++++++++++++++++++++ */
  /*         Process the tree        */
  /* +++++++++++++++++++++++++++++++ */
  

  //        CASE 1: Filtering        //
  
  if (!strcmp(args.filter_arg, "filter")) {
    value *out_filter = calloc(size_tile, sizeof(value));   check_alloc(out_filter, 3);
    
    info("Filtering the data");
    tree_filtering(local_tree, out_filter, size_tile, args.decision_arg, attrib, args.lambda_arg);
    MPI_Barrier(MPI_COMM_WORLD);
    timing("Tree filtering: wallclock time = %0.2f",
	   (float)(times(&tstruct) - start)/(float)sysconf(_SC_CLK_TCK));
    
    if(args.saveout_arg){
      if ((!strcmp(args.tree_arg, "min") && !strcmp(args.morphology_arg, "opening")) ||
	  (!strcmp(args.tree_arg, "max") && !strcmp(args.morphology_arg, "closing"))) {
	#pragma omp parallel for
	for (ulong i = 0; i < size_tile; i++) 
	  out_filter[i] = g_max_greyval - out_filter[i];
      }
      write_output(&args, out_filter, AttribsArray[attrib].name, dims_img, dims_tile, local_tree->border);
      timing("Output file written, wallclock time = %0.2f",
	     (float)(times(&tstruct) - start)/(float)sysconf(_SC_CLK_TCK));
    }
    free(out_filter);
  }

  //   CASE 2: Differential profile  //

  else if (!strcmp(args.filter_arg, "csl")) {
      
    value *out_orig   = calloc(local_tree->size, sizeof(value));   check_alloc(out_orig,   4);
    value *out_dh     = calloc(local_tree->size, sizeof(value));   check_alloc(out_dh,     5);
    value *out_scale  = calloc(local_tree->size, sizeof(value));   check_alloc(out_scale,  6); 
    value *temp_scale = calloc(local_tree->size, sizeof(value));   check_alloc(temp_scale, 7);
    value *temp_dh    = calloc(local_tree->size, sizeof(value));   check_alloc(temp_dh,    8);
    bool *temp_valid  = calloc(local_tree->size, sizeof(bool));    check_alloc(temp_valid, 9);

    info("Starting CSL segmentation");
    // tree_differential(local_tree, size_tile, lvec, out_dh, temp_dh, out_orig, out_scale, temp_scale, temp_valid,  AttribsArray[attrib].attribute);
    MPI_Barrier(MPI_COMM_WORLD);
    timing("CSL segmentation: wallclock time = %0.2f",
	   (float)(times(&tstruct) - start)/(float)sysconf(_SC_CLK_TCK));
    
    if(args.saveout_arg){
      write_differential(&args, out_orig, out_dh, out_scale, AttribsArray[attrib].name, dims_img, dims_tile, local_tree->border);
      timing("CSL output files written, wallclock time = %0.2f",
	     (float)(times(&tstruct) - start)/(float)sysconf(_SC_CLK_TCK));
    }
    free(out_orig);
    free(out_dh);
    free(out_scale);
    free(temp_valid);
    free(temp_scale);
    free(temp_dh);     
  }
    
  //   CASE 3: Pattern spectra  //

  else if (!strcmp(args.filter_arg, "pattern")) {
    double *all_spectrum  = calloc(lvec->num_lambdas, sizeof(double)); check_alloc(all_spectrum, 10);
    double *loc_spectrum  = calloc(lvec->num_lambdas, sizeof(double)); check_alloc(loc_spectrum, 11);

    // tree_pattern_spectrum(local_tree, size_tile, lvec, copy_attr, gvals_par, loc_spectrum, args.background_arg, AttribsArray[attrib].attribute);
    MPI_Reduce(loc_spectrum, all_spectrum, lvec->num_lambdas, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    MPI_Barrier(MPI_COMM_WORLD);
    timing("Pattern spectra built: wallclock time = %0.2f",
			   (float)(times(&tstruct) - start)/(float)sysconf(_SC_CLK_TCK));
      
    if(args.saveout_arg && rank() == 0){
      write_pattern_spectra(&args, all_spectrum, lvec->num_lambdas);
      timing("Pattern spectra written, wallclock time = %0.2f",
	   (float)(times(&tstruct) - start)/(float)sysconf(_SC_CLK_TCK));
    }
    
    free(gvals_par);
    free(copy_attr);
    free(loc_spectrum);
    free(all_spectrum);
  }


  //   CASE 4: Functional test  //

  else if (!strcmp(args.filter_arg, "test")) {
    args.bpp_arg = -32;
    // if(rank() == 1) check_maxtree(local_tree, AttribsArray[attrib].attribute, local_tree->size);
    value *out_filter = calloc(size_tile, sizeof(value));   check_alloc(out_filter, 3);
    //  tree_filter_test(local_tree, out_filter, 0, size_tile ,AttribsArray[attrib].attribute);
    write_output(&args, out_filter, AttribsArray[0].name, dims_img, dims_tile, local_tree->border);
    timing("Test file written, wallclock time = %0.2f",
	   (float)(times(&tstruct) - start)/(float)sysconf(_SC_CLK_TCK));
  }

  //   CASE 5: No filter  //
  
  else 
    info("Error or no filter chosen");
  
      
  if(rank() == 0) printf("\n******* End of DISCCOMAN, cleaning ... ***** \n\n");
  /* +++++++++++++++++++++++++++++++ */
  /*              Clean Up           */
  /* +++++++++++++++++++++++++++++++ */
  
  /*  free_tree(local_tree);
  free(attr_off);
  lambda_vector_delete(lvec);
  cmdline_parser_free(&args);
  MPI_Type_free( &mpi_bound_node_type );
  MPI_Type_free( &mpi_borderindex_type );
  MPI_Type_free( &mpi_attribute_type );*/
  finalize_mpi();
    
  return 0;
} /* main */
