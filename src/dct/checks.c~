#include "types.h"
#include "moschini.h"
 
#define MAX_MSG_SIZE 256


void set_border(Arguments *args, Node* tree){
  uint	 	grid[3]       = {args->grid_arg[0], args->grid_arg[1], args->grid_arg[2]};
  uint 		myrank        = rank();			
  uint 		myrank_2D     = myrank % (grid[1]*grid[0]);
  uint 		myrank_arr[3] = {myrank_2D % grid[0], myrank_2D / grid[0], myrank / (grid[1]*grid[0])};

  tree->border[0] = myrank_arr[0] % grid[0] != 0 ? true : false;
  tree->border[1] = myrank_arr[0] % grid[0] < grid[0]-1 ? true : false;
  tree->border[2] = myrank_arr[1] % grid[1] != 0 ? true : false;
  tree->border[3] = myrank_arr[1] % grid[1] < grid[1]-1 ? true : false;
  tree->border[4] = myrank_arr[2] % grid[2] != 0 ? true : false;
  tree->border[5] = myrank_arr[2] % grid[2] < grid[2]-1 ? true: false;

}

ulong *attribute_offsets(Arguments *args, ulong dims[3]){
  uint	 	grid[3]       = {args->grid_arg[0], args->grid_arg[1], args->grid_arg[2]};
  uint 		myrank        = rank();			
  uint 		myrank_2D     = myrank % (grid[1]*grid[0]);
  uint 		myrank_arr[3] = {myrank_2D % grid[0], myrank_2D / grid[0], myrank / (grid[1]*grid[0])};

  ulong *attr_off = calloc(3, sizeof(ulong));
  ulong counts[3] = {0};
  for (int i = 3; i-- ; ) {
    counts[i]  = dims[i] / grid[i];
    attr_off[i] = myrank_arr[i]*counts[i];
    if (myrank_arr[i] < dims[i]%grid[i]) {
      counts[i]++;
      attr_off[i] += myrank_arr[i];
    } else {
      attr_off[i] += dims[i]%grid[i];
    }
     counts[i] += attr_off[i] - 1;
    if((attr_off[i] > 1)){
      attr_off[i]--;
    }
  }
  return attr_off;
}

void set_flooding(Arguments *args, int bit_depth){
  if (args->flood_orig == NULL)
    args->flood_arg = (bit_depth >= 16 || bit_depth < 0) ? 1 : 0;
  else if(args->flood_arg < 0 || args->flood_arg > 2){
    if(rank() == 0){
       error("Wrong flooding algorithm choice: valid choices are 0 (Salembier), 1 (Wilkinson Improved), 1 (Wilkinson  basic)");
       MPI_Abort(MPI_COMM_WORLD, 001);
    }
  }
}

void set_connectivity(Arguments *args, ulong dims_z){
  if (args->connectivity_orig == NULL)
    args->connectivity_arg = dims_z > 1 ? 6 : 4;
  else if(args->connectivity_arg != 4 && args->connectivity_arg != 6 && args->connectivity_arg != 8 && args->connectivity_arg != 26){
    if(rank() == 0){
       error("Wrong Connectivity");
       MPI_Abort(MPI_COMM_WORLD, 001);
    }
  } else if( args->connectivity_arg == 8 && dims_z > 1){
    if(rank() == 0) warn("Wrong connectivity (8) for data dimension (3D), changing to 26");
    args->connectivity_arg = 26;
  } else if( args->connectivity_arg == 26 && dims_z == 1){
    if(rank() == 0) warn("Wrong connectivity (26) for data dimension (2D), changing to 8");
    args->connectivity_arg = 8;
  }
}

void check_alloc(void *array, int code) {
  if (NULL == array) {
    if (code < 100)
      error("Allocation failed, out of memory? code: %d (seq_main.c || step_main.c)", code);	
    else if (code < 200)
      error("Allocation failed, out of memory? code: %d (attributes.c)", code);
    else if (code < 300)
      error("Allocation failed, out of memory? code: %d (boundary.c || boundary_step.c)", code);
    else if (code < 400)
      error("Allocation failed, out of memory? code: %d (communication.c)", code);
    else if (code < 500)
      error("Allocation failed, out of memory? code: %d (queue.c)", code);
    else if (code < 600)
      error("Allocation failed, out of memory? code: %d (tree_flood.c || tree_step.c)", code);
    else if (code < 700)
      error("Allocation failed, out of memory? code: %d (tree_filt.c)", code);
    else if (code < 800)
      error("Allocation failed, out of memory? code: %d (image.c)", code);
    MPI_Abort(MPI_COMM_WORLD, code);
  }
} /* check_alloc */

void check_not_null(void *ptr, int code) {
  if (NULL == ptr) {
    error("Pointer is null. code: %d", code);
    MPI_Abort(MPI_COMM_WORLD, code);
  }
} /* check_not_null */

void check_mpi_error(int errorval, int code) {
  if (MPI_SUCCESS != errorval) {
    error("MPI communication error %d! %d", errorval, code);
    MPI_Abort(MPI_COMM_WORLD, code);
  }
} /* check_mpi_error */

void check_file_close(int errorval, const char *filename) {
  if (0 != errorval) {
    error("Error closing file %s : errorval", filename);
    MPI_Abort(MPI_COMM_WORLD, errorval);
  }
} /* check_file_close */

void check_area_size(ulong size, ulong area) {
  if (area != size) {
    error("Area does not equal size after flooding, aborting.");
    MPI_Abort(MPI_COMM_WORLD, 133);
  }
} /* check_area_size */


void check_operation(Arguments *args, Node *tree, ulong offset){
 if ((!strcmp(args->tree_arg, "min") && !strcmp(args->morphology_arg, "opening")) ||
      (!strcmp(args->tree_arg, "max") && !strcmp(args->morphology_arg, "closing"))) {
    #pragma omp parallel for
    for (ulong i = 0; i < tree->size; i++) 
      tree->gval[i] = (value) offset - tree->gval[i];    
  }
}


void check_boundary(Boundary *b) {
  printf("Proc %d, Boundary exists of array %p, dims %zu %zu %zu, offset %zu %zu %zu %zu %zu %zu %zu, size %zu \n", rank(), (void *)  b->array, b->dims[0], b->dims[1], b->dims[2],
	   b->offset[0], b->offset[1], b->offset[2], b->offset[3], b->offset[4],
	   b->offset[5], b->offset[6], b->size_curr);
  
   for (ulong a = 0; a < b->size_curr; a++) {
     double attrib = 0;
     if(b->attribute_idx[a] != -1) {
      /*EnclRectData *thisdata = maxtree->attribute[a];
      attribb[0] = thisdata->minX;
      attribb[1] = thisdata->minY;
      attribb[2] = thisdata->minZ;
      attribb[3] = thisdata->maxX;
      attribb[4] = thisdata->maxY;
      attribb[5] = thisdata->maxZ;*/
       attrib = (*AttribsArray[0].attribute)((char *) b->store->data + b->attribute_idx[a] * sizeof(AreaData));
      }
    printf("%zu: index %ld gval %f border_idx %ld border_par %ld attr %lf \n",
	   a, (b->array[a]).index, (float) (b->array[a]).gval, (b->array[a]).border_idx, b->border_par[a].i, attrib);
   }
} /* check_boundary */

void check_maxtree(Node *tree, double (*attribute)(void *), ulong size) {
  // ulong attribb[6]={0};
  for (ulong a = 0; a < size; a++) {
      double attrib = 0;

     if(tree->attribute[a]) {
      /*EnclRectData *thisdata = maxtree->attribute[a];
      attribb[0] = thisdata->minX;
      attribb[1] = thisdata->minY;
      attribb[2] = thisdata->minZ;
      attribb[3] = thisdata->maxX;
      attribb[4] = thisdata->maxY;
      attribb[5] = thisdata->maxZ;*/
       attrib = (*attribute)(tree->attribute[a]);
      }
    // else intertia = 0;
    printf("index %ld,  parent %ld, gval %f, attribute %lf\n",
	   a, tree->parent[a],  (float) tree->gval[a],  attrib);
  }
} /* check_maxtree */



/*void check_leros(Node *tree){
 
  double countLeros = 0;
  double sumGval = 0;
    
  for(ulong i=0; i<tree->size; i++) {
    idx parent = tree->parent_qu[i];
    idx gparent = tree->parent_qu[parent];
    idx ggparent = tree->parent_qu[gparent];

      if( parent != BOTTOM && tree->gval_qu[i] == tree->gval_qu[parent] && (gparent != BOTTOM) && tree->gval_qu[parent] == tree->gval_qu[gparent] && ggparent != BOTTOM  && tree->gval_qu[gparent] == tree->gval_qu[ggparent]) {
	printf("ERROR: Node does not point to levelroots. i %d, gval_qu %f, parent %d, gval_qu %f, gparent %d gval_qu %f\n", i, (float) tree->gval_qu[i], parent, (float) tree->gval_qu[parent], gparent,  (float) tree->gval_qu[gparent] );
    MPI_Abort(MPI_COMM_WORLD, 1);
      }		
		
      if(parent != BOTTOM && tree->gval_qu[i] < tree->gval_qu[parent]){			
	printf("ERROR: A node points to one lower than its original grey value. Level root for a quantized values must correspond to a minimum original value for that level\n");
	MPI_Abort(MPI_COMM_WORLD, 1);
      }
		
      if(parent != BOTTOM && tree->gval_qu[i] > tree->gval_qu[parent]){
	countLeros++;
	sumGval += tree->gval[i];
      }

      ulong lvl = get_levelroot_qu(tree, i);
      if(lvl > i && tree->gval[lvl] >= tree->gval[i]){
	error("Err or in the levelroots");
	MPI_Abort(MPI_COMM_WORLD, 1);
      }
    
      if(parent == BOTTOM)
	printf("It is the root node: it must be one!\n");
    }	
  printf("Average leros gvalues = %f. Num leros = %1.0f, Sum = %1.0f\n", sumGval/countLeros, countLeros, sumGval); 
}

void check_sorted(value *gval, ulong *sorted, ulong size)
{
    for(ulong i=0; i<size; i++)
    {

        if( ((i>1) && ( (gval[sorted[i]]) < gval[sorted[i-1]])) || ( (i>1) && (gval[sorted[i]] == gval[sorted[i-1]]) && (sorted[i] < sorted[i-1]) ) )
        {
            error("ERROR\n"); // in the IF, use '>' if descending ordering is used; '<' otherwise
	    MPI_Abort(MPI_COMM_WORLD, 1);
        }
    }    
    }*/


