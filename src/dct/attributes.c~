#include "types.h"
#include "attributes.h"
#include "checks.h"
#include "tree_filt.h"


void init_aux_data_store(AuxDataStore *store, size_t size_item, ulong size_array){
  store->size_item  = size_item;
  store->size_alloc = size_array;
  store->item_curr  = 0;
  store->data = calloc(size_array, size_item);
  check_alloc(store->data, 100);
}

void clear_aux_data_store(AuxDataStore *store){ 
  free(store->data);
  free(store);
}

void *get_new_aux_data(AuxDataStore *store){
  
  char *p;
  if (store->item_curr >= store->size_alloc){
    debug(" Reallocation of attribute storage (may cause errors),size item %ld",  store->size_item);
    store->size_alloc = store->size_alloc > 1 ? store->size_alloc * 1.5 : store->size_alloc*100 ;
    store->data       = realloc(store->data, store->size_alloc * store->size_item);
    check_alloc(store->data, 101);
  }
  p = (char *)(store->data + (ulong) store->size_item * store->item_curr);
  store->item_curr++;
  return((void *) p);    
}

void realloc_store(AuxDataStore *store){  
  if (store->item_curr < store->size_alloc){
    store->data       = realloc(store->data, store->item_curr * store->size_item);
    check_alloc(store->data, 101);
  }
}


/****** Typedefs and functions for area attributes ******************************/

void *new_area_data(AuxDataStore *store, void *data){
   AreaData *areadata;
   areadata = store ? get_new_aux_data(store) :  calloc(1, sizeof(AreaData));
   check_alloc(areadata, 102);
   init_area_data((void *)areadata, data);
   return(areadata);
} /* new_area_data */

void init_area_data(void *areaattr, void *data){
  AreaData *areadata = areaattr;
  areadata->area = 1;
}

void *load_area_data( AuxDataStore *store, void *initval){
   AreaData *areadata;
   double *values = (double *) initval;
   ulong area = (ulong) (*values);
   areadata = store ? get_new_aux_data(store) :  calloc(1, sizeof(AreaData));
   check_alloc(areadata, 103);
   areadata->area = area;
   return(areadata);
} /* new_area_data */

void delete_area_data(void *areaattr){
  free(areaattr);
} /* delete_area_data */


void add_to_area_data(void *areaattr, void *data){
   AreaData *areadata = areaattr;
   areadata->area++;
} /* add_to_area_data */

void merge_area_data(void *areaattr, void *childattr){
   AreaData *areadata = areaattr;
   AreaData *childdata = childattr;

   areadata->area += childdata->area;
} /* merge_area_data */

void merge_to_area_data( AuxDataStore *store, void **thisattr, void *areaattr, void *childattr){
  AreaData *thisdata = *thisattr;
  AreaData *areadata = areaattr;
  AreaData *childdata = childattr;

  if (!thisdata) {
    thisdata = store ? get_new_aux_data(store) : calloc(1, sizeof(AreaData));
    check_alloc(thisdata, 104);
    *thisattr = thisdata;
  }
  thisdata->area = areadata->area + childdata->area;
} /* merge_to_area_data */

void clone_area_data( AuxDataStore *store, void **thisattr, void *areaattr){

  AreaData *thisdata = *thisattr;
  AreaData *areadata = areaattr;
  if (!thisdata) {
    thisdata = store ? get_new_aux_data(store) : calloc(1, sizeof(AreaData));
    check_alloc(thisdata, 105);
    *thisattr = thisdata;
  }

  thisdata->area = areadata->area;
} /* clone_area_data */

double area_attribute(void *areaattr){
   AreaData *areadata = areaattr;
   double area;

   area = areadata->area;
   return(area);
} /* area_attribute */

/****** Typedefs and functions for minimum enclosing rectangle attributes *******/

void *new_encl_rect_data( AuxDataStore *store, void *data){
   EnclRectData *rectdata;
   rectdata = store ? get_new_aux_data(store) :  calloc(1, sizeof(EnclRectData));
   check_alloc(rectdata, 106);
   init_encl_rect_data((void *) rectdata, data );
   return(rectdata);
} /* new_encl_rect_data */

void init_encl_rect_data( void *rectattr, void *data ){
  EnclRectData *rectdata = rectattr;
  double *initcoord = (double *) data;
  rectdata->minX = rectdata->maxX = (ulong) initcoord[0];
  rectdata->minY = rectdata->maxY = (ulong) initcoord[1];
  rectdata->minZ = rectdata->maxZ = (ulong) initcoord[2];
}

void *load_encl_rect_data( AuxDataStore *store, void *data){
   EnclRectData *rectdata;
   double *initcoord = (double *) data; 
   rectdata = store ? get_new_aux_data(store) :  calloc(1, sizeof(EnclRectData));
   check_alloc(rectdata, 107);   
   rectdata->minX = (ulong) initcoord[0];
   rectdata->maxX = (ulong) initcoord[1];
   rectdata->minY = (ulong) initcoord[2];
   rectdata->maxY = (ulong) initcoord[3];
   rectdata->minZ = (ulong) initcoord[4];
   rectdata->maxZ = (ulong) initcoord[5];
   return(rectdata);
} /* new_encl_rect_data */


void delete_encl_rect_data(void *rectattr)
{
  free(rectattr);
} /* delete_encl_rect_data */

void add_to_encl_rect_data(void *rectattr, void *data){
   EnclRectData *rectdata = rectattr;
   double *values = (double *) data; 

   rectdata->minX = MIN(rectdata->minX, (ulong) values[0]);
   rectdata->minY = MIN(rectdata->minY, (ulong) values[1]);
   rectdata->minZ = MIN(rectdata->minZ, (ulong) values[2]);
   rectdata->maxX = MAX(rectdata->maxX, (ulong) values[0]);
   rectdata->maxY = MAX(rectdata->maxY, (ulong) values[1]);
   rectdata->maxZ = MAX(rectdata->maxZ, (ulong) values[2]);
} /* add_to_encl_rect_data */

void merge_encl_rect_data(void *rectattr, void *childattr){
   EnclRectData *rectdata = rectattr;
   EnclRectData *childdata = childattr;

   rectdata->minX = MIN(rectdata->minX, childdata->minX);
   rectdata->minY = MIN(rectdata->minY, childdata->minY);
   rectdata->minZ = MIN(rectdata->minZ, childdata->minZ);
   rectdata->maxX = MAX(rectdata->maxX, childdata->maxX);
   rectdata->maxY = MAX(rectdata->maxY, childdata->maxY);
   rectdata->maxZ = MAX(rectdata->maxZ, childdata->maxZ);
} /* merge_encl_rect_data */

void merge_to_encl_rect_data( AuxDataStore *store, void **thisattr, void *rectattr, void *childattr){
  EnclRectData *thisdata = *thisattr;
  EnclRectData *rectdata = rectattr;
  EnclRectData *childdata = childattr;

  if (!thisdata) {
    thisdata = store ? get_new_aux_data(store) : calloc(1, sizeof(EnclRectData));
    check_alloc(thisdata, 108);
    *thisattr = thisdata;
  }
  thisdata->minX = MIN(rectdata->minX, childdata->minX);
  thisdata->minY = MIN(rectdata->minY, childdata->minY);
  thisdata->minZ = MIN(rectdata->minZ, childdata->minZ);
  thisdata->maxX = MAX(rectdata->maxX, childdata->maxX);
  thisdata->maxY = MAX(rectdata->maxY, childdata->maxY);
  thisdata->maxZ = MAX(rectdata->maxZ, childdata->maxZ);
} /* merge_to_encl_rect_data */

void clone_encl_rect_data( AuxDataStore *store, void **thisattr, void *rectattr){
  EnclRectData *thisdata = *thisattr;
  EnclRectData *rectdata = rectattr;

  if (!thisdata) {
    thisdata = store ? get_new_aux_data(store) : calloc(1, sizeof(EnclRectData));
    check_alloc(thisdata, 109);
    *thisattr = thisdata;
  }
  thisdata->minX = rectdata->minX;
  thisdata->minY = rectdata->minY;
  thisdata->minZ = rectdata->minZ;
  thisdata->maxX = rectdata->maxX;
  thisdata->maxY = rectdata->maxY;
  thisdata->maxZ = rectdata->maxZ;
} /* clone_encl_rect_data */

double encl_rect_area_attribute(void *rectattr){
  EnclRectData *rectdata = rectattr;
  double volume;

  volume = (rectdata->maxX - rectdata->minX + 1)
    * (rectdata->maxY - rectdata->minY + 1)
    * (rectdata->maxZ - rectdata->minZ + 1);
  return(volume);
} /* encl_rect_area_attribute */

double encl_rect_diag_attribute(void *rectattr){/* Computes the square of the length of the diagonal */
  EnclRectData *rectdata = rectattr;
  double minx, miny, minz, maxx, maxy, maxz, l;

  minx = rectdata->minX;
  miny = rectdata->minY;
  minz = rectdata->minZ;
  maxx = rectdata->maxX;
  maxy = rectdata->maxY;
  maxz = rectdata->maxZ;
  l = (maxx-minx+1) * (maxx-minx+1)
    + (maxy-miny+1) * (maxy-miny+1)
    + (maxz-minz+1) * (maxz-minz+1);
  return(l);
} /* encl_rect_diag_attribute */

/****** Typedefs and functions for moment of inertia attributes **************************/

void *new_inertia_data( AuxDataStore *store, void *data){
  InertiaData *inertiadata;
  inertiadata = store ? get_new_aux_data(store) : calloc(1, sizeof(InertiaData));
  check_alloc(inertiadata, 110);
  init_inertia_data((void *) inertiadata, data);
  return(inertiadata);
} /* new_inertia_data */

void init_inertia_data( void *inertiaattr, void *data){
  InertiaData *inertiadata = inertiaattr;
  double *init = (double *) data;
  inertiadata->area = 1;
  inertiadata->sumX = init[0];
  inertiadata->sumY = init[1];
  inertiadata->sumZ = init[2];
  inertiadata->sumR2 = init[0]*init[0] + init[1]* init[1] + init[2]*init[2];
  
}
void *load_inertia_data( AuxDataStore *store, void *data){
  double *init = (double *) data;
  InertiaData *inertiadata;
  inertiadata = store ? get_new_aux_data(store) : calloc(1, sizeof(InertiaData));
  check_alloc(inertiadata, 111);
  
  inertiadata->area = init[0];
  inertiadata->sumX = init[1];
  inertiadata->sumY = init[2];
  inertiadata->sumZ = init[3];
  inertiadata->sumR2 = init[4];
  return(inertiadata);
} /* new_inertia_data */

void delete_inertia_data(void *inertiaattr)
{
  free(inertiaattr);
} /* delete_inertia_data */

void add_to_inertia_data(void *inertiaattr, void *data){
   InertiaData *inertiadata = inertiaattr;
   double *values = (double *) data;
   inertiadata->area++;
   inertiadata->sumX += values[0];
   inertiadata->sumY += values[1];
   inertiadata->sumZ += values[2];
   inertiadata->sumR2 += values[0]*values[0] + values[1]*values[1] + values[2]*values[2];;
} /* add_to_inertia_data */

void merge_inertia_data(void *inertiaattr, void *childattr)
{
   InertiaData *inertiadata = inertiaattr;
   InertiaData *childdata = childattr;

   inertiadata->area += childdata->area;
   inertiadata->sumX += childdata->sumX;
   inertiadata->sumY += childdata->sumY;
   inertiadata->sumZ += childdata->sumZ;
   inertiadata->sumR2 += childdata->sumR2;
} /* merge_inertia_data */

void merge_to_inertia_data( AuxDataStore *store, void **thisattr, void *inertiaattr, void *childattr){
   InertiaData *thisdata = *thisattr;
   InertiaData *inertiadata = inertiaattr;
   InertiaData *childdata = childattr;

   if (!thisdata) {
     thisdata = store ? get_new_aux_data(store) : calloc(1, sizeof(InertiaData));
     check_alloc(thisdata, 112);
     *thisattr = thisdata;
   }
   thisdata->area = inertiadata->area + childdata->area;
   thisdata->sumX = inertiadata->sumX + childdata->sumX;
   thisdata->sumY = inertiadata->sumY + childdata->sumY;
   thisdata->sumZ = inertiadata->sumZ + childdata->sumZ;
   thisdata->sumR2 = inertiadata->sumR2 + childdata->sumR2;
} /* merge_to_inertia_data */

void clone_inertia_data( AuxDataStore *store, void **thisattr, void *inertiaattr){
  InertiaData *thisdata = *thisattr;
  InertiaData *inertiadata = inertiaattr;

  if (!thisdata) {
    thisdata = store ? get_new_aux_data(store) : calloc(1, sizeof(InertiaData));
    check_alloc(thisdata, 113);
    *thisattr = thisdata;
  }
  thisdata->area = inertiadata->area;
  thisdata->sumX = inertiadata->sumX;
  thisdata->sumY = inertiadata->sumY;
  thisdata->sumZ = inertiadata->sumZ;
  thisdata->sumR2 = inertiadata->sumR2;
} /* clone_inertia_data */

double inertia_attribute(void *inertiaattr){
   InertiaData *inertiadata = inertiaattr;
   double area, inertia;

   area = inertiadata->area;
   inertia = inertiadata->sumR2 -
             (inertiadata->sumX * inertiadata->sumX +
              inertiadata->sumY * inertiadata->sumY +
              inertiadata->sumZ * inertiadata->sumZ) / area
             + area / 6.0;  /* ??? */
   return(inertia);
} /* inertia_attribute */

double inertia_div_a2_attribute(void *inertiaattr){
   InertiaData *inertiadata = inertiaattr;
   double inertia, area;

   area = (double)(inertiadata->area);
   inertia = inertiadata->sumR2 -
             (inertiadata->sumX * inertiadata->sumX +
              inertiadata->sumY * inertiadata->sumY +
              inertiadata->sumZ * inertiadata->sumZ) / area
             + area / 6.0;  /* ??? */
   return(inertia/pow(area,5.0/3.0));
} /* inertia_div_a2_attribute */

double mean_x_attribute(void *inertiaattr){
   InertiaData *inertiadata = inertiaattr;
   double area, sumx;

   area = inertiadata->area;
   sumx = inertiadata->sumX;
   return(sumx/area);
} /* mean_x_attribute */

double mean_y_attribute(void *inertiaattr){
   InertiaData *inertiadata = inertiaattr;
   double area, sumy;

   area = inertiadata->area;
   sumy = inertiadata->sumY;
   return(sumy/area);
} /* mean_y_attribute */

double mean_z_attribute(void *inertiaattr){
   InertiaData *inertiadata = inertiaattr;
   double area, sumz;

   area = inertiadata->area;
   sumz = inertiadata->sumZ;
   return(sumz/area);
} /* mean_z_attribute */



AttribStruct AttribsArray[NUMATTR] =
{
  {"Area", sizeof(AreaData), new_area_data, init_area_data, delete_area_data, add_to_area_data, merge_area_data, merge_to_area_data, clone_area_data, create_mpi_area_type, area_attribute},
  {"Area of min. enclosing rectangle", sizeof(EnclRectData),  new_encl_rect_data, init_encl_rect_data, delete_encl_rect_data, add_to_encl_rect_data, merge_encl_rect_data, merge_to_encl_rect_data, clone_encl_rect_data, create_mpi_rect_type, encl_rect_area_attribute},
  {"Square of diagonal of min. enclosing rectangle", sizeof(EnclRectData), new_encl_rect_data, init_encl_rect_data, delete_encl_rect_data, add_to_encl_rect_data, merge_encl_rect_data, merge_to_encl_rect_data, clone_encl_rect_data, create_mpi_rect_type, encl_rect_diag_attribute},
  {"Moment of Inertia", sizeof(InertiaData), new_inertia_data, init_inertia_data, delete_inertia_data, add_to_inertia_data, merge_inertia_data, merge_to_inertia_data, clone_inertia_data, create_mpi_inertia_type, inertia_attribute},
  {"(Moment of Inertia) / (area)^2", sizeof(InertiaData), new_inertia_data, init_inertia_data, delete_inertia_data, add_to_inertia_data, merge_inertia_data, merge_to_inertia_data, clone_inertia_data,  create_mpi_inertia_type, inertia_div_a2_attribute},
  {"Mean X position", sizeof(InertiaData), new_inertia_data, init_inertia_data, delete_inertia_data, add_to_inertia_data, merge_inertia_data, merge_to_inertia_data, clone_inertia_data,  create_mpi_inertia_type, mean_x_attribute},
  {"Mean Y position", sizeof(InertiaData), new_inertia_data, init_inertia_data, delete_inertia_data, add_to_inertia_data, merge_inertia_data, merge_to_inertia_data, clone_inertia_data,  create_mpi_inertia_type, mean_y_attribute},
  {"Mean Z position", sizeof(InertiaData), new_inertia_data, init_inertia_data, delete_inertia_data, add_to_inertia_data, merge_inertia_data, merge_to_inertia_data, clone_inertia_data,  create_mpi_inertia_type, mean_z_attribute}
};


DecisionStruct Decisions[NUMDECISIONS] =
{
  //  {"Direct", tree_filter_direct},
  //  {"Min", tree_filter_min},  
  // {"Max", tree_filter_max},
 // {"Subtractive", tree_filter_subtractive},
  };
